"""Animavita adoption"""
type Adoption implements Node {
  """The ID of an object"""
  id: ID!

  """MongoDB _id"""
  _id: ID!

  """The adoption user reference"""
  user: String!

  """The animal name"""
  name: String!

  """The animal gender"""
  gender: Gender!

  """The animal breed"""
  breed: String!

  """The animal type"""
  type: Type!

  """The animal age"""
  age: Int!

  """The animal size"""
  size: Size!

  """The animal photos"""
  photos: [String!]!

  """Any observation about the animal"""
  observations: String!
}

input CreateAdoptionInput {
  name: String!
  gender: Gender!
  breed: String!
  type: Type!
  age: Int!
  size: Size!
  photos: [String]!
  observations: String!
  clientMutationId: String
}

type CreateAdoptionPayload {
  error: String
  adoption: Adoption
  clientMutationId: String
}

type Email {
  email: ID!
  providedBy: String!
}

enum Gender {
  MALE
  FEMALE
}

type Mutation {
  """Save facebook user data"""
  SaveFacebookUser(input: SaveFacebookUserInput!): SaveFacebookUserPayload

  """Create a new adoption"""
  CreateAdoption(input: CreateAdoptionInput!): CreateAdoptionPayload
}

"""An object with an ID"""
interface Node {
  """The id of the object."""
  id: ID!
}

type ProfileImage {
  """The url of the profile image"""
  url: String!
  providedBy: String!
}

"""The id of the user in the provider DB"""
type ProviderId {
  id: String!
  providedBy: String!
}

"""The root of all queries"""
type Query {
  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node
  user(id: ID!): User
  me: User
  adoptions: [Adoption]
}

input SaveFacebookUserInput {
  token: String!
  expires: Int!
  permissions: [String!]!
  clientMutationId: String
}

type SaveFacebookUserPayload {
  error: String
  user: User
  token: String
  clientMutationId: String
}

enum Size {
  SMALL
  MEDIUM
  BIG
}

enum Type {
  DOG
  CAT
  OTHER
}

"""Animavita user"""
type User implements Node {
  """The ID of an object"""
  id: ID!

  """MongoDB _id"""
  _id: ID!

  """The name of the user"""
  name: String!

  """Emails of the user separed by provider"""
  emails: [Email!]!
  providerIds: [ProviderId!]!
  profileImages: [ProfileImage!]!
}
